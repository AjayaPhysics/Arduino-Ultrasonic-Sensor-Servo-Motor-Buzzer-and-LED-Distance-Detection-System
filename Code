#include <Servo.h>

// Define pins for HC-SR04
const int trigPin = 9;
const int echoPin = 8;

// Define pins for buzzer and LED
const int buzzerPin = 4;
const int ledPin = 5;

// Define variables for duration and distance
long duration;
int distance;

// Create servo object
Servo myServo;

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Set pin modes
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  pinMode(ledPin, OUTPUT);

  // Attach servo to pin 3
  myServo.attach(3);

  // Initialize servo position and outputs
  myServo.write(0);
  digitalWrite(buzzerPin, LOW);
  digitalWrite(ledPin, LOW);
}

void loop() {
  // Send a 10-microsecond pulse to the trigPin
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Read the echoPin and calculate the distance
  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2; // Convert to cm

  // Print the distance to the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");

  // Control servo, buzzer, and LED based on distance
  if (distance < 10) {
    myServo.write(90); // Rotate servo to 90 degrees
    digitalWrite(buzzerPin, HIGH); // Activate buzzer
    digitalWrite(ledPin, HIGH);    // Turn on LED
    Serial.println("Object detected: Servo at 90 degrees, Buzzer ON, LED ON");
  } else {
    myServo.write(0); // Reset servo to 0 degrees
    digitalWrite(buzzerPin, LOW); // Deactivate buzzer
    digitalWrite(ledPin, LOW);    // Turn off LED
    Serial.println("No object: Servo at 0 degrees, Buzzer OFF, LED OFF");
  }

  // Small delay for stability
  delay(200);
}
